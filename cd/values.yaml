appName: graphhopper
appEnv: stage
service: 
  type: NodePort
  expose:
  - 8989
deployment:
  container1:
   labels:
     billing: eat
     sub-billing: graphhopper
   dnsPolicy : "None"
   voyager:
     rightSize: "true"
     containersToRightSize: ""
   strategy: RollingUpdate
   probe:
     type: http
     livenessProbe:
       initialDelaySeconds:
       periodSeconds:
       successThreshold:
       timeoutSeconds:
     readinessProbe:
       periodSeconds:
       successThreshold:
       timeoutSeconds:
       initialDelaySeconds:
   resources:
     limits:
       cpu: 2
       memory: 5000Mi
     requests:
       cpu: 1
       memory: 3500Mi
   image:
     repository: gcr.io/curefoods-infra/graphhopper  
     tag: <TAG_NAME>
     pullPolicy: IfNotPresent
   voyager:
     rightSize: "true"
     containersToRightSize: ""
   probe:
     type: http
     livenessProbe:
       initialDelaySeconds: 
       periodSeconds: 
       successThreshold: 
       timeoutSeconds: 
     readinessProbe:
       periodSeconds: 
       successThreshold: 
       timeoutSeconds:
       initialDelaySeconds:
   probePath: /route?point=12.980269%2C77.694232&point=12.979178%2C77.69725&type=json&locale=en-GB&vehicle=car&weighting=fastest&elevation=false  
   probePort: 8989
   livenessProbe:
     initialDelaySeconds:
     periodSeconds: 
     successThreshold: 
     timeoutSeconds: 
   readinessProbe:
     periodSeconds: 
     successThreshold: 
     timeoutSeconds:
     initialDelaySeconds:
   terminationGracePeriodSeconds:
   replicaCount: 
   maxSurge: 
   maxUnavailable: 
   tolerations:
   env:
   drainTime: 
   preStopCommand: echo Done
   nodeAffinity:
   rollover: false
   serviceAccount:
     roleArn: 
   # nodeSelector:
   #   spotinst.io/node-lifecycle: od
   # podAnnotations:
     # iam.amazonaws.com/role: role-arn
  container2:
     resources:
       limits:
         cpu: 250m
         memory: 200Mi
       requests:
         cpu: 250m
         memory: 200Mi
     image:
       repository: gcr.io/stackdriver-agents/stackdriver-logging-agent:1.6.37
       pullPolicy: IfNotPresent
     voyager:
       rightSize: "true"
       containersToRightSize: ""
pdb: 
  minAvailable: 49%
metrics:
  enabled: false
  path: "/metrics"
  port: 
  interval: 30s
secrets:
secretFiles:
datadog:
  enabled: false
  custom_metrics: false 
ingress:
  enabled: false
istio:
  allOutboundInterception: true
  outlierDetection:
    enabled: false
    baseEjectionTime: 10s
    consecutiveErrors: 5
    interval: 20s
    maxEjectionPercent: 25
  mcb:
    enabled: false
    config:
  tls:
    enabled: false
  internal:
          hosts:
                  - graphhopper.stage.eatfit.internal
  external:
          hosts:
                  - graphhopper.stage.eatfit.in
  vpn:
  mesh:
   timeout: 360s
  custom:
  alb:
  default:
    match:
    - prefix: /
    timeout: "480s"
    retries:
      attempts: 3
      perTryTimeout: 2s
      retryOn: gateway-error,connect-failure,refused-stream
canary:
  enabled: "no"
  image:
    baseline:
      repository:
      tag:
    canary:
      repository:
      tag:
  weight:
    baseline: 0
    canary: 0
    default: 100
# cronjob:
#   labels:
#     billing:
#     sub-billing:
#   concurrencyPolicy: Allow
#   failedJobsHistoryLimit: 1
#   successfulJobsHistoryLimit: 3
#   startingDeadlineSeconds: 600 #10min https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/#starting-deadline
#   activeDeadlineSeconds: 3600 #1hour
#   image:
#     repository: draft
#     tag: dev
#     pullPolicy: IfNotPresent
#   resources:
#     limits:
#       cpu: 1000m
#       memory: 1024Mi
#     requests:
#       cpu: 100m
#       memory: 100Mi
migration: "false"
disable_mesh_gateway: "false"
redirect: "false"

deployScalingOnly:
  enabled: "false"
scalingOverride:
  enabled: "false"

